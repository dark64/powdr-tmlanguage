{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "powdr",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#block-comments"
    },
    {
      "include": "#machines"
    },
    {
      "include": "#instructions"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#submachines"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#strings"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.powdr",
          "match": "\\b(debug|file|in|is|loc|match)\\b"
        },
        {
          "name": "keyword.other.powdr",
          "match": "\\b(constraints|degree|function|instr|label|machine|reg)\\b"
        },
        {
          "name": "keyword.control.pil",
          "match": "\\b(connect|namespace|macro|include)\\b"
        },
        {
          "name": "storage.type.pil keyword.other.pil",
          "match": "\\b(col|pol)\\b"
        },
        {
          "name": "storage.modifier.pil keyword.other.pil",
          "match": "\\b(constant|commit|fixed|public|witness)\\b"
        }
      ]
    },
    "machines": {
      "name": "meta.function.powdr",
      "begin": "(machine)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.machine.powdr"
        }
      },
      "end": "(?<=\\{)",
      "patterns": [
        {
          "include": "#block-comments"
        },
        {
          "name": "entity.name.type.machine.powdr",
          "match": "[a-zA-Z_][a-zA-Z$_0-9@]*"
        }
      ]
    },
    "submachines": {
      "name": "meta.submachine.powdr",
      "match": "([a-zA-Z_][a-zA-Z$_0-9@]*)\\s+([a-zA-Z_][a-zA-Z$_0-9@]*);",
      "captures": {
        "1": {
          "name": "entity.name.type.submachine.powdr"
        },
        "2": {
          "name": "variable.other.submachine.powdr"
        }
      }
    },
    "instructions": {
      "name": "meta.instr.powdr",
      "match": "(instr)\\s+([a-zA-Z_][a-zA-Z$_0-9@]*)",
      "captures": {
        "1": {
          "name": "keyword.other.instr.powdr"
        },
        "2": {
          "name": "meta.definition.instr.powdr entity.name.function.instr.powdr"
        }
      }
    },
    "functions": {
      "name": "meta.function.powdr",
      "begin": "(function)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.function.powdr"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#block-comments"
        },
        {
          "name": "meta.definition.function.powdr entity.name.function.powdr",
          "match": "[a-zA-Z_][a-zA-Z$_0-9@]*"
        },
        {
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "include": "#statements"
            }
          ]
        }
      ]
    },
    "statements": {
      "patterns": [
        {
          "include": "#block-comments"
        },
        {
          "include": "#comments"
        },
        {
          "name": "keyword.control.label.powdr",
          "match": "([a-zA-Z_][a-zA-Z$_0-9@]*)::"
        },
        {
          "name": "meta.expression.assignment.powdr",
          "begin": "\\b([a-zA-Z_][a-zA-Z$_0-9@]*)(?=\\s*<)\\b",
          "beginCaptures": {
            "1": {
              "name": "variable.other.powdr"
            }
          },
          "end": "(?=;)",
          "patterns": [
            {
              "include": "#block-comments"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#variables"
            }
          ]
        },
        {
          "name": "meta.expression.function.call.powdr",
          "begin": "\\b([a-zA-Z_][a-zA-Z$_0-9@]*)(?!\\s*<)\\b",
          "beginCaptures": {
            "1": {
              "name": "meta.definition.function.powdr entity.name.function.powdr"
            }
          },
          "end": "(?=;)",
          "patterns": [
            {
              "include": "#block-comments"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#variables"
            }
          ]
        }
      ]
    },
    "variables": {
      "name": "variable.other.powdr",
      "match": "([a-zA-Z_][a-zA-Z$_0-9@]*)(?:')?"
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.hex.powdr",
          "match": "(0x[0-9A-Fa-f][0-9A-Fa-f_]*)"
        },
        {
          "name": "constant.numeric.powdr",
          "match": "([0-9][0-9_]*)"
        }
      ]
    },
    "comments": {
      "name": "comment.line.double-slash.powdr",
      "match": "\\s*//.*"
    },
    "block-comments": {
      "name": "comment.block.powdr",
      "begin": "/\\*(?!\\*)",
      "end": "\\*/",
      "patterns": [{ "include": "#comments" }]
    },
    "strings": {
      "name": "string.quoted.double.powdr",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.powdr",
          "match": "\\\\."
        }
      ]
    }
  },
  "scopeName": "source.powdr"
}
